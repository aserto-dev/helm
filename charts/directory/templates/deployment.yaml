apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "directory.fullname" . }}
  labels:
    {{- include "directory.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "directory.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "directory.selectorLabels" . | nindent 8 }}
    spec:
      {{- include "aserto-lib.imagePullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "directory.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: config
          secret:
            secretName: {{ include "directory.fullname" . }}-config
            items:
              - key: config.yaml
                path: config.yaml
        - name: admin-keys
          configMap:
            name: {{ include "directory.fullname" . }}-admin-keys
        - name: grpc-certs
        {{- with (include "aserto-lib.grpcConfig" . | fromYaml) }}
        {{- if .certSecret  }}
          secret:
            secretName: {{ .certSecret }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- end }}
        - name: https-certs
        {{- with (include "aserto-lib.httpsConfig" . | fromYaml) }}
        {{- if .certSecret }}
          secret:
            secretName: {{ .certSecret }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- end }}

        {{- if and .Values.tenantDirectory.runService .Values.tenantDirectory.rootDS.grpcCertSecret }}
        - name: root-ds-grpc-certs
          secret:
            secretName: {{ .Values.tenantDirectory.rootDS.grpcCertSecret }}
            items:
              - key: ca.crt
                path: ca.crt
        {{- end }}

      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          args: ["--config", "/config/config.yaml", "run"]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- with (include "aserto-lib.selfPorts" . | fromYaml )}}
            - name: https
              containerPort: {{ .https }}
            - name: grpc
              containerPort: {{ .grpc }}
            - name: metrics
              containerPort: {{ .metrics }}
            {{- end }}
            - containerPort: 2222
              name: ssh-admin
          volumeMounts:
            - name: config
              mountPath: /config
              readOnly: true
            - name: admin-keys
              mountPath: "/admin-keys"
              readOnly: true
            - name: grpc-certs
              mountPath: /grpc-certs
            {{- if (include "aserto-lib.grpcConfig" . | fromYaml).certSecret  }}
              readOnly: true
            {{- end }}
            - name: https-certs
              mountPath: /https-certs
            {{- if (include "aserto-lib.httpsConfig" . | fromYaml).certSecret  }}
              readOnly: true
            {{- end }}

            {{- if and .Values.tenantDirectory.runService .Values.tenantDirectory.rootDS.grpcCertSecret }}
            - name: root-ds-grpc-certs
              mountPath: /root-ds-grpc-certs
              readOnly: true
            {{- end }}
          env:
            {{- with (include "aserto-lib.rootDirectoryApiKey" . | fromYaml) }}
            - name: DIRECTORY_ROOT_DS_CLIENT_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .secretName }}
                  key: {{ .secretKey }}
            {{- end }}

            {{- if .Values.tenantDirectory.runService }}
            {{- with (include "aserto-lib.directoryApiKeys" . | fromYaml) }}
            - name: DIRECTORY_DS_WRITE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .secretName }}
                  key: {{ .writerSecretKey }}
            - name: DIRECTORY_DS_READ_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .secretName }}
                  key: {{ .readerSecretKey }}
            {{- end }}

            {{- with .Values.tenantDirectory.database }}
            - name: DIRECTORY_DB_WRITER_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .admin.credentialsSecret }}
                  key: username
            - name: DIRECTORY_DB_WRITER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .admin.credentialsSecret }}
                  key: password
            - name: DIRECTORY_DB_READER_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .reader.credentialsSecret }}
                  key: username
            - name: DIRECTORY_DB_READER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .reader.credentialsSecret }}
                  key: password
            {{- end }}
            {{- end }}

            {{- if .Values.rootDirectory.runService -}}
            {{- with .Values.rootDirectory.database }}
            - name: DIRECTORY_ROOT_DB_WRITER_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .admin.credentialsSecret }}
                  key: username
            - name: DIRECTORY_ROOT_DB_WRITER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .admin.credentialsSecret }}
                  key: password
            - name: DIRECTORY_ROOT_DB_READER_USER
              valueFrom:
                secretKeyRef:
                  name: {{ (.reader).credentialsSecret }}
                  key: username
            - name: DIRECTORY_ROOT_DB_READER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .reader.credentialsSecret }}
                  key: password
            {{- end }}
            {{- end }}

          {{- range $_, $tenant := .Values.tenants -}}
            {{- with $tenant.keysSecret }}
            - name: {{ printf "TENANT_%s_WRITER_KEY" (replace "." "_" $tenant.name | upper) }}
              valueFrom:
                secretKeyRef:
                  name: {{ .name | required "tenants[].keysSecret.name is required" }}
                  key: {{ .writerKey | default "writer" }}
            - name: {{ printf "TENANT_%s_READER_KEY" (replace "." "_" $tenant.name | upper) }}
              valueFrom:
                secretKeyRef:
                  name: {{ .name | required "tenants[].keysSecret.name is required" }}
                  key: {{ .readerKey | default "reader" }}
            {{- end }}
          {{- end }}

          {{- with (include "aserto-lib.selfPorts" . | fromYaml )}}
          livenessProbe:
            grpc:
              port: {{ .health }}
          readinessProbe:
            grpc:
              port: {{ .health }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
