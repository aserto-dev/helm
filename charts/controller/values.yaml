# Default values for directory.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
---
image:
  repository: ghcr.io/aserto-dev/directory
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: x.y.z

# Optional: override default ports.
# ports:
#   grpc: 8282
#   http: 8383
#   health: 8484
#   metrics: 8585

# Optional: OpenID Connect domain and audience.
oidc:
#   domain: ""
#   audience: ""

# Required: Provide one or more SSH public keys to be granted admin access.
# sshAdminKeys:
#   # Keys can be provided inline as a multi-line string under keys:
#   keys: |
#     # Add your authorized SSH public keys here
#     ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDf6
#     ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDa7
#   # Keys can also be provided in a ConfigMap
#   configMap:
#     name: controller-admin-keys
#     key: authorized_keys

database:
  # REQUIRED: root directory database hostname
  host: ""
  port: 5432
  dbName: aserto-controller
  sslMode: require
  admin:
    credentialsSecret: pg-controller-admin-credentials
    options:
      debug_mode: false
      max_open_conns: 25
      max_idle_conns: 25
      conn_max_lifetime: 5
      query_timeout_seconds: 60

  reader:
    credentialsSecret: pg-controller-reader-credentials
    options:
      debug_mode: false
      max_open_conns: 25
      max_idle_conns: 25
      conn_max_lifetime: 5
      query_timeout_seconds: 5

# Optional: list of predefined tenants.
tenants:
#   - name: my-tenant
#     id: 3dbaa470-9c7e-11ef-bf36-00fcb2a75cb1
#     # Read-only and read-write API keys for the tenant.
#     keys:
#       writer: fb634e791176409a8c5dd6776435fb0b
#       reader: 39fa2ac0eb0f45fdb9234bb69436940f
#     # Kubernetes secret containing API keys for the tenant.
#     # If 'keysSecret' is provided, 'keys' is ignored.
#     keysSecret:
#       name: my-tenant-keys
#       writerKey: writer
#       readerKey: reader

# vault:
#   [Optional] Vault token
#   token: ""
#   [Optional] Kubernetes secret containing the vault token
#   tokenSecret:
#     # Secret name
#     name: ""
#     # Secret key
#     key: "token"
#   address: "https://127.0.0.1:8200"
#   rootPath: "/"
#   insecure: true

# Set the service log level (trace/debug/info/warn/error).
# The default is 'info'.
# logLevel: info

# gRPC configuration.
grpc:
  # Set the service's gRPC connection timeout (in seconds)
  connectionTimeoutSec: 2
  # Optional: name of a Kubernetes secret of type kubernetes.io/tls.
  # If specified, the gRPC server uses TLS with the provided certificate.
  # Otherwise, ther server runs without TLS.
  # Note: clients will not send credentials without TLS. If the service
  # runs without it, you must configure TLS at the ingress or gateway.
  certSecret:

# http:
#   allowed_origins:
#     - https://*.example.com
#   read_timeout: 2s
#   read_header_timeout: 2s
#   write_timeout: 2s
#   idle_timeout: 30s
#
#   The services generates self-signed certificates by default.
#   To use your own certificate provide the name of a secret
#   of type kubernetes.io/tls
#   certSecret: directory-rest-cert

# metrics:
#   zpages: true
#   grpc:
#     counters: true
#     durations: true
#     gateway: true

# Disable authorization
# noAuthorization: false

# cache:
#   sizeMB: 25
#   # 30 minutes
#   ttlSeconds: 1800
#   cleanWindowSeconds: 10

replicaCount: 1

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  annotations: {}
  # When ingress is enabled, the gRPC port is defined on a separate 'controller-grpc' service.
  # This allows for configuration of ingresses using service annotations. In particular, the service
  # scheme needs to be set to 'h2c'.
  # When ingress is not enabled, these values are ignored.
  grpc:
    type: ClusterIP
    annotations: {}
    #   With traefik ingress use:
    #   traefik.ingress.kubernetes.io/service.serversscheme: h2c
    #
    #   With kong:
    #   konghq.com/protocol: grpc

ingress:
  enabled: false
  # The ingress domain can be set here or in global.aserto.ingress.domain
  # domain: example.com
  http:
    subdomain: controller
    className: ""
    annotations: {}
    # tlsSecret: controller-tls
  grpc:
    subdomain: grpc-controller
    className: ""
    annotations: {}
    # tlsSecret: grpc-controller-tls

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
